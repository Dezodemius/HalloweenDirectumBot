using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using BotCommon;
using BotCommon.Scenarios;
using Directum238Bot.Repository;
using NLog;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;
using File = System.IO.File;

namespace Directum238Bot.Scenarios;

public class SendWishScenario : AutoStepBotCommandScenario
{
  private readonly UserContentCache cache;
  private readonly string wishDay;
  public override Guid Id => new Guid("6A5102BE-668C-42D2-9FD2-818494DCDE8B");

  public override string ScenarioCommand => BotChatCommand.GetWish23;

  public static async Task SendInstruction(ITelegramBotClient botClient, Update update, long chatId)
  {
    var inlineMarkup = new InlineKeyboardMarkup(new []
    {
      new []{ InlineKeyboardButton.WithCallbackData("–ù–∞–∂–º–∏, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ ü§ñ", BotChatCommand.GenerateWish) },
      new []{ InlineKeyboardButton.WithCallbackData(Directum238BotResources.GoStartMenu, BotChatCommand.Start) }
    });
    await botClient.SendTextMessageAsync(chatId, Directum238BotResources.SendWishToMe, replyMarkup: inlineMarkup);
  }

  public async Task SendUserCheckMessage(ITelegramBotClient botClient, Update update, long chatId)
  {
    var inlineMarkup = new InlineKeyboardMarkup(new []
    {
        new [] { InlineKeyboardButton.WithCallbackData(Directum238BotResources.SendWishButton, BotChatCommand.Send) },
        new [] { InlineKeyboardButton.WithCallbackData(Directum238BotResources.GoStartMenu, BotChatCommand.Start)}
    });

    if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery.Data == BotChatCommand.GenerateWish)
    {
      string aiWish;
      await botClient.SendChatActionAsync(chatId, ChatAction.Typing);
      await botClient.SendTextMessageAsync(chatId, "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã ChatGPT –ø—Ä–∏–¥—É–º–∞–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ ü§ñ");
      try
      {
        aiWish = await GetAIWish();
      }
      catch (Exception e)
      {
        var backToMenuMarkup = new InlineKeyboardMarkup(
          InlineKeyboardButton.WithCallbackData(Directum238BotResources.GoStartMenu, BotChatCommand.Start));
        await botClient.SendTextMessageAsync(chatId, "–£–ø—Å... –±–æ—Ç —Ç–æ–∂–µ –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –í—Å—è –Ω–∞–¥–µ–∂–¥–∞ –Ω–∞ —Ç–µ–±—è", replyMarkup: backToMenuMarkup);
        LogManager.GetCurrentClassLogger().Error(e);
        throw;
      }
      await botClient.SendTextMessageAsync(chatId, aiWish, replyMarkup: inlineMarkup);
      return;
    }
    if (update.Type != UpdateType.Message || update.Message == null)
      return;
    await botClient.SendTextMessageAsync(chatId, Directum238BotResources.SendWishConfirmationMessage);
    switch (update.Message.Type)
    {
      case MessageType.VideoNote:
        if (update.Message.VideoNote != null)
        {
          await botClient.SendVideoNoteAsync(chatId, new InputOnlineFile(update.Message.VideoNote.FileId), replyMarkup: inlineMarkup);
        }
        break;
      case MessageType.Text:
        if (update.Message.Text != null)
          await botClient.SendTextMessageAsync(chatId, update.Message.Text);
        break;
      case MessageType.Voice:
        if (update.Message.Voice != null)
          await botClient.SendVoiceAsync(chatId, new InputOnlineFile(update.Message.Voice.FileId), replyMarkup: inlineMarkup);
        break;
      default:
        await botClient.SendTextMessageAsync(chatId, Directum238BotResources.UnknownMessageType, replyMarkup: inlineMarkup);
        break;
    }
    await botClient.DeleteMessageAsync(chatId, update.Message.MessageId);
  }

  public async Task ConfirmSending(ITelegramBotClient botClient, Update update, long chatId)
  {
    if (update.CallbackQuery != null)
    {
      if (update.CallbackQuery.Data == BotChatCommand.Send)
      {
        var type = update.CallbackQuery.Message.Type;
        var inlineMarkup = new InlineKeyboardMarkup(new []
        {
          InlineKeyboardButton.WithCallbackData(Directum238BotResources.GoStartMenu, BotChatCommand.Start)
        });
        string beforeWishDayDate;
        switch (wishDay)
        {
          case WishDay.Day23:
          {
            beforeWishDayDate = "22 —Ñ–µ–≤—Ä–∞–ª—è";
            break;
          }
          case WishDay.Day8:
          {
            beforeWishDayDate = "7 –º–∞—Ä—Ç–∞";
            break;
          }
          default:
          {
            beforeWishDayDate = "–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤—è—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è";
            break;
          }
        }

        var gif = wishDay == WishDay.Day23
            ? new InputOnlineFile(File.OpenRead(GetGifPath("2.gif")), "2.gif")
            : new InputOnlineFile(File.OpenRead(GetGifPath("3.gif")), "3.gif");
        await botClient.SendAnimationAsync(chatId,
          gif,
          caption: string.Format(Directum238BotResources.AfterMessageSaveMessage, beforeWishDayDate),
          replyMarkup: inlineMarkup);

        await botClient.DeleteMessageAsync(chatId, update.CallbackQuery.Message.MessageId);
        switch (type)
        {
          case MessageType.Text:
          {
            cache.Add(new UserContent(chatId, update.CallbackQuery.Message.Text,
              update.CallbackQuery.Message.Type, wishDay));
            break;
          }
          case MessageType.VideoNote:
          {
            cache.Add(new UserContent(chatId, update.CallbackQuery.Message.VideoNote.FileId,
              update.CallbackQuery.Message.Type, wishDay));
            break;
          }
          case MessageType.Voice:
          {
            cache.Add(new UserContent(chatId, update.CallbackQuery.Message.Voice.FileId,
              update.CallbackQuery.Message.Type, wishDay));
            break;
          }
        }
      }
    }
  }

  private static string GetGifPath(string gifFileName)
  {
    return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "GIFs", gifFileName);
  }

  private async Task<string> GetAIWish()
  {
    var questionToAi = wishDay switch
    {
        WishDay.Day23 => "–Ω–∞–ø–∏—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω —Å –¥–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –æ—Ç–µ—á–µ—Å—Ç–≤–∞ –Ω–∞ 23 —Ñ–µ–≤—Ä–∞–ª—è",
        WishDay.Day8 => "–Ω–∞–ø–∏—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –¥–∞–º —Å —ç—Ç–∏–º –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –≤–µ—Å–µ–Ω–Ω–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –¥–Ω—ë–º 8 –º–∞—Ä—Ç–∞",
        _ => string.Empty
    };
    return await new OpenAIClient(new BotConfigManager().Config.OpenAiApiKey).GetAnswer(questionToAi);
  }

  public SendWishScenario(UserContentCache cache, string wishDay)
  {
    this.cache = cache;
    this.wishDay = wishDay;
    this.steps = new List<BotCommandScenarioStep>
    {
        new (SendInstruction),
        new (SendUserCheckMessage),
        new (ConfirmSending)
    }.GetEnumerator();
  }
}